package com.ymt.mybatis;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.session.RowBounds;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.GeneratedKey;
import org.springframework.util.CollectionUtils;
import sun.jvm.hotspot.debugger.Page;

import java.util.Iterator;
import java.util.List;

public class CustomMybatisPlugin extends PluginAdapter {
    public static String BASE_DAO_CLASS_NAME = "com.alibaba.ais.tools.mybatis.BaseDao";

    public CustomMybatisPlugin() {
    }

    @Override
    public boolean validate(List<String> warnings) {
        return true;
    }

    @Override
    public void initialized(IntrospectedTable introspectedTable) {
        super.initialized(introspectedTable);
    }

    @Override
    public boolean sqlMapInsertElementGenerated(XmlElement element, IntrospectedTable introspectedTable) {
        this.createAutoIncrementSelectKey(element, introspectedTable);
        return super.sqlMapInsertElementGenerated(element, introspectedTable);
    }

    @Override
    public boolean sqlMapInsertSelectiveElementGenerated(XmlElement element, IntrospectedTable introspectedTable) {
        this.createAutoIncrementSelectKey(element, introspectedTable);
        return super.sqlMapInsertSelectiveElementGenerated(element, introspectedTable);
    }

    private void createAutoIncrementSelectKey(XmlElement insert, IntrospectedTable introspectedTable) {
        List<IntrospectedColumn> primaryKeyColumns = introspectedTable.getPrimaryKeyColumns();
        if (primaryKeyColumns != null && primaryKeyColumns.size() == 1) {
            IntrospectedColumn pk = (IntrospectedColumn)primaryKeyColumns.get(0);
            if (pk.isAutoIncrement()) {
                GeneratedKey gk = new GeneratedKey(pk.getActualColumnName(), "MySQL", true, pk.getJdbcTypeName());
                XmlElement answer = new XmlElement("selectKey");
                answer.addAttribute(new Attribute("resultType", pk.getFullyQualifiedJavaType().getFullyQualifiedName()));
                answer.addAttribute(new Attribute("keyProperty", pk.getJavaProperty()));
                answer.addAttribute(new Attribute("keyColumn", pk.getActualColumnName()));
                answer.addAttribute(new Attribute("order", gk.getMyBatis3Order()));
                answer.addElement(new TextElement(gk.getRuntimeSqlStatement()));
                insert.addElement(answer);
            }
        }

    }

    private void addAutoGeneratedKeysAttributes(XmlElement element, IntrospectedTable introspectedTable) {
        List<IntrospectedColumn> primaryKeyColumns = introspectedTable.getPrimaryKeyColumns();
        if (primaryKeyColumns != null && primaryKeyColumns.size() == 1) {
            IntrospectedColumn pk = (IntrospectedColumn)primaryKeyColumns.get(0);
            if (pk.isAutoIncrement()) {
                element.addAttribute(new Attribute("useGeneratedKeys", "true"));
                element.addAttribute(new Attribute("keyColumn", pk.getActualColumnName()));
                element.addAttribute(new Attribute("keyProperty", pk.getJavaProperty()));
            }
        }

    }

    @Override
    public boolean clientInsertMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable) {
        return true;
    }

    @Override
    public boolean clientInsertSelectiveMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable) {
        return true;
    }

    @Override
    public boolean clientUpdateByPrimaryKeyWithoutBLOBsMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable) {
        return true;
    }

    @Override
    public boolean clientDeleteByPrimaryKeyMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable) {
        return true;
    }

    @Override
    public boolean clientSelectByPrimaryKeyMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable) {
        return true;
    }

    @Override
    public boolean clientGenerated(Interface interfaze, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        String domainObjectName = introspectedTable.getFullyQualifiedTable().getDomainObjectName();
        String targetPackage = this.getContext().getJavaModelGeneratorConfiguration().getTargetPackage();
        FullyQualifiedJavaType model = new FullyQualifiedJavaType(targetPackage + "." + domainObjectName);
        interfaze.addImportedType(model);
        interfaze.addImportedType(new FullyQualifiedJavaType(Mapper.class.getName()));
        interfaze.addAnnotation("@Mapper");
        FullyQualifiedJavaType baseDaoType = new FullyQualifiedJavaType(BASE_DAO_CLASS_NAME);
        interfaze.addImportedType(baseDaoType);
        baseDaoType.addTypeArgument(new FullyQualifiedJavaType(domainObjectName));
        String idcClassType = Long.class.getName();
        List<IntrospectedColumn> primaryKeyColumns = introspectedTable.getPrimaryKeyColumns();
        if (!CollectionUtils.isEmpty(primaryKeyColumns)) {
            Iterator var10 = primaryKeyColumns.iterator();

            while(var10.hasNext()) {
                IntrospectedColumn primaryKeyColumn = (IntrospectedColumn)var10.next();
                int jdbcType = primaryKeyColumn.getJdbcType();
                if (12 == jdbcType) {
                    idcClassType = String.class.getName();
                }
            }
        }

        baseDaoType.addTypeArgument(new FullyQualifiedJavaType(idcClassType));
        interfaze.addSuperInterface(baseDaoType);
        return super.clientGenerated(interfaze, topLevelClass, introspectedTable);
    }

    @Override
    public boolean modelFieldGenerated(Field field, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) {
        return super.modelFieldGenerated(field, topLevelClass, introspectedColumn, introspectedTable, modelClassType);
    }

    @Override
    public boolean sqlMapUpdateByPrimaryKeyWithoutBLOBsElementGenerated(XmlElement element, IntrospectedTable introspectedTable) {
        return true;
    }

    @Override
    public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable) {
        return true;
    }

    @Override
    public boolean clientSelectByExampleWithoutBLOBsMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable) {
        String domainObjectName = introspectedTable.getFullyQualifiedTable().getDomainObjectName();
        String targetPackage = this.getContext().getJavaModelGeneratorConfiguration().getTargetPackage();
        FullyQualifiedJavaType model = new FullyQualifiedJavaType(targetPackage + "." + domainObjectName);
        interfaze.addImportedType(new FullyQualifiedJavaType(RowBounds.class.getName()));
        interfaze.addImportedType(new FullyQualifiedJavaType(Page.class.getName()));
        Method paginatedSelectByExample = new Method("selectByExample");
        paginatedSelectByExample.setVisibility(JavaVisibility.PUBLIC);
        paginatedSelectByExample.setSynchronized(false);
        FullyQualifiedJavaType returnType = new FullyQualifiedJavaType(Page.class.getTypeName());
        returnType.addTypeArgument(model);
        paginatedSelectByExample.setReturnType(returnType);
        paginatedSelectByExample.addParameter(0, new Parameter(new FullyQualifiedJavaType(introspectedTable.getExampleType()), "example"));
        paginatedSelectByExample.addParameter(1, new Parameter(new FullyQualifiedJavaType(RowBounds.class.getTypeName()), "rowBounds"));
        interfaze.addMethod(paginatedSelectByExample);
        return true;
    }
}
